{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"cpp": {
		"prefix": "h2",
		"body": [
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "int main()",
		  "{",
		  "    $0",
		  "",
		  "    return 0;",
		  "}"
		],
		"description": ""
	  },

	  "dsu_union_by_size": {
		"prefix": "dsu_sz",
		"body": [
		  "//DSU_UNION_BY_SIZE",
		  "const int N = 1e5+5;",
		  "int parent[N]; ",
		  "int parentSize[N]; ",
		  "",
		  "void dsu_set(int n)",
		  "{",
		  "    for(int i = 1; i<=n; i++)",
		  "    {",
		  "        parent[i] = i;",
		  "        parentSize[i] = 1; ",
		  "    }",
		  "}",
		  "",
		  "int dsu_find(int node)",
		  "{",
		  "    while(parent[node] != node)",
		  "    {",
		  "        node = parent[node]; ",
		  "    }",
		  "    return node; ",
		  "}",
		  "",
		  "// This is union by size",
		  "void dsu_union(int a, int b)",
		  "{",
		  "    int leaderA = dsu_find(a); ",
		  "    int leaderB = dsu_find(b); ",
		  "    if(leaderA != leaderB)",
		  "    {",
		  "        if(parentSize[leaderA] > parentSize[leaderB])",
		  "        {",
		  "            // Leader is 'A'",
		  "            parent[leaderB] = leaderA;",
		  "            parentSize[leaderA] += parentSize[leaderB]; ",
		  "        }",
		  "",
		  "        else ",
		  "        {",
		  "            // Leader is 'B'",
		  "            parent[leaderA] = leaderB;",
		  "            parentSize[leaderB] += parentSize[leaderA]; ",
		  "        }",
		  "    }",
		  "}"
		],
		"description": ""
	  },

	  "sll": {
		"prefix": "sll",
		"body": [
		  "class Node",
		  "{",
		  "public:",
		  "    int val;",
		  "    Node *next;",
		  "",
		  "    Node(int val)",
		  "    {",
		  "        this->val = val;",
		  "        this->next = NULL;",
		  "    }",
		  "};"
		],
		"description": ""
	  },


	  "dll": {
		"prefix": "dll",
		"body": [
		  "class Node",
		  "{",
		  "public:",
		  "    int val;",
		  "    Node *next;",
		  "    Node *prev;",
		  "",
		  "    Node(int val)",
		  "    {",
		  "        this->val = val;",
		  "        this->next = NULL;",
		  "        this->prev = NULL;",
		  "    }",
		  "};"
		],
		"description": ""
	  },
}